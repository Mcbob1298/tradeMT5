# -*- coding: utf-8 -*-
"""
ULTRA SCALPING BOT - STRAT√âGIE CONTRE-TENDANCE EXTR√äME
====================================================

üî• BOT ULTRA AGRESSIF - SCALPING CONTRE-TENDANCE
‚ö° Logique: Detecte la direction et trade CONTRE
üìà Hausse d√©tect√©e ‚Üí SELL (bet sur correction)
üìâ Baisse d√©tect√©e ‚Üí BUY (bet sur rebond)

‚ö†Ô∏è ATTENTION: Strat√©gie tr√®s risqu√©e!
- TP minimal (quelques pips)
- Aucun Stop Loss (SL = 0)
- Trading haute fr√©quence
- Capital √† risque uniquement!

Auteur: Ultra Scalper
Date: 14 ao√ªt 2025
"""

import MetaTrader5 as mt5
import numpy as np
from datetime import datetime, timedelta
import sys
import os
import time
import random
import traceback
import io
import sys
import os
import time
import random
import traceback

# Configuration UTF-8 pour Windows
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# =============================================================================
# CONFIGURATION ULTRA SCALPING
# =============================================================================
ENABLE_REAL_TRADING = True   # ‚úÖ TRADING R√âEL ACTIV√â sur compte d√©mo
MT5_LOGIN = 95539860       # Votre compte d√©mo
MT5_PASSWORD = "WmQ-R5Nh"    
MT5_SERVER = "MetaQuotes-Demo"

# Param√®tres ultra agressifs
SYMBOL = "XAUUSD"           # Or (tr√®s volatil = parfait pour scalping)
TIMEFRAME = mt5.TIMEFRAME_M1  # 1 minute (ultra rapide)
LOT_SIZE = 0.01             # Lot minimal pour commencer
TP_PIPS = 23                 # Take Profit: 23 pips seulement!
USE_STOP_LOSS = True        # Stop Loss activ√© pour les SELL
MAX_POSITIONS = 99999999999           # Maximum 5 positions simultan√©es
ANALYSIS_INTERVAL = 10      # Analyse toutes les 10 secondes
DAILY_PROFIT_LIMIT = 400    # Limite de profit par jour en EUR/USD

# Configuration profit journalier - Balance de r√©f√©rence
INITIAL_BALANCE_TODAY = 3000.00  # Balance de r√©f√©rence (d√©but de journ√©e 15/08/2025)

# Seuils de d√©tection de tendance (ultra sensibles)
TREND_EMA_FAST = 5          # EMA rapide (5 p√©riodes)
TREND_EMA_SLOW = 10         # EMA lente (10 p√©riodes)
RSI_PERIOD = 7              # RSI ultra court
# RSI_OVERBOUGHT et RSI_OVERSOLD sont maintenant d√©finis dans la config
# =============================================================================

def safe_log(message):
    """Log avec timestamp pour ultra scalping"""
    try:
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]  # Millisecondes
        print(f"[{timestamp}] {message}", flush=True)
        sys.stdout.flush()
    except Exception as e:
        print(f"[LOG ERROR] {e}", flush=True)

class UltraScalpingBot:
    """
    Bot de scalping ultra agressif contre-tendance
    Strat√©gie: Fade les mouvements, bet sur les corrections
    """
    
    def __init__(self, config_name='YOLO', manual_daily_profit=None):
        self.symbol = SYMBOL
        self.timeframe = TIMEFRAME
        self.is_trading = False
        self.manual_daily_profit = manual_daily_profit  # Profit manuel si fourni
        self.bot_trades_profit = 0  # Profit des trades ex√©cut√©s par ce bot
        
        # Chargement de la configuration
        from ultra_scalping_config import YOLO_CONFIG, AGGRESSIVE_CONFIG, BALANCED_CONFIG, CONSERVATIVE_CONFIG
        configs = {
            'YOLO': YOLO_CONFIG,
            'AGGRESSIVE': AGGRESSIVE_CONFIG, 
            'BALANCED': BALANCED_CONFIG,
            'CONSERVATIVE': CONSERVATIVE_CONFIG
        }
        self.config = configs.get(config_name, YOLO_CONFIG)
        safe_log(f"üéÆ Configuration: {config_name}")
        safe_log(f"üìä RSI SELL > {self.config['RSI_OVERBOUGHT']}")
        safe_log(f"üìä RSI BUY < {self.config['RSI_OVERSOLD']}")
        
        # Statistiques ultra scalping
        self.stats = {
            'total_trades': 0,
            'winning_trades': 0,
            'total_pips': 0,
            'total_profit': 0,
            'max_concurrent_positions': 0,
            'avg_trade_duration': 0,
            'fastest_profit': float('inf'),
            'start_time': datetime.now(),
            'last_trade_time': None,
            'daily_profit': 0,  # Profit du jour en cours
            'daily_start': datetime.now().date(),  # Date de d√©but du jour
            'daily_limit_reached': False  # Flag pour limite journali√®re atteinte
        }
        
        # √âtat des positions
        self.open_positions = []
        self.position_count = 0
        self.sell_positions_count = 0  # Compteur sp√©cifique pour les SELL
        self.buy_positions_count = 0   # Compteur sp√©cifique pour les BUY
        
        # D√©tection de tendance
        self.trend_data = {
            'current_trend': 'UNKNOWN',
            'trend_strength': 0,
            'trend_duration': 0,
            'last_trend_change': datetime.now()
        }
        
        # Initialisation MT5
        self.initialize_mt5()
        
        # Synchronisation des compteurs de positions avec MT5
        self.sync_position_counters_with_mt5()
    
    def sync_position_counters_with_mt5(self):
        """Synchronise les compteurs de positions avec les positions r√©elles de MT5"""
        try:
            # R√©cup√©ration des positions ouvertes sur MT5
            mt5_positions = mt5.positions_get(symbol=self.symbol)
            
            if mt5_positions:
                # Reset des compteurs
                self.sell_positions_count = 0
                self.buy_positions_count = 0
                
                # Comptage des positions par type
                for position in mt5_positions:
                    if position.type == mt5.POSITION_TYPE_SELL:
                        self.sell_positions_count += 1
                    elif position.type == mt5.POSITION_TYPE_BUY:
                        self.buy_positions_count += 1
                
                safe_log(f"üîÑ Synchronisation positions MT5:")
                safe_log(f"   üìä SELL en cours: {self.sell_positions_count}")
                safe_log(f"   üìä BUY en cours: {self.buy_positions_count}")
                safe_log(f"   üìä Total positions: {len(mt5_positions)}")
                
                # Mise √† jour de la liste des positions ouvertes pour suivi
                self.open_positions = []
                for position in mt5_positions:
                    position_info = {
                        'ticket': position.ticket,
                        'open_time': datetime.fromtimestamp(position.time),  # Conversion timestamp MT5
                        'type': 'SELL' if position.type == mt5.POSITION_TYPE_SELL else 'BUY',
                        'volume': position.volume,
                        'open_price': position.price_open,
                        'tp': position.tp if position.tp > 0 else None,
                        'sl': position.sl if position.sl > 0 else None
                    }
                    self.open_positions.append(position_info)
                
            else:
                safe_log("üìä Aucune position ouverte sur MT5")
                self.sell_positions_count = 0
                self.buy_positions_count = 0
                self.open_positions = []
                
        except Exception as e:
            safe_log(f"‚ö†Ô∏è Erreur synchronisation compteurs: {e}")
            # En cas d'erreur, on garde les valeurs par d√©faut
            self.sell_positions_count = 0
            self.buy_positions_count = 0
            self.open_positions = []
    
    def initialize_mt5(self):
        """Initialise MT5 pour ultra scalping"""
        if not mt5.initialize():
            safe_log("‚ùå √âchec initialisation MT5")
            return False
        
        # Connexion compte
        if not mt5.login(MT5_LOGIN, password=MT5_PASSWORD, server=MT5_SERVER):
            safe_log(f"‚ùå √âchec connexion compte {MT5_LOGIN}")
            safe_log(f"Erreur: {mt5.last_error()}")
            mt5.shutdown()
            return False
        
        safe_log("‚úÖ MT5 initialis√© pour ULTRA SCALPING")
        
        # Infos compte
        account_info = mt5.account_info()
        if account_info:
            safe_log(f"üí∞ Balance: ${account_info.balance:.2f}")
            safe_log(f"üìä √âquit√©: ${account_info.equity:.2f}")
        
        # Activation symbole
        if mt5.symbol_select(self.symbol, True):
            safe_log(f"‚ö° {self.symbol} activ√© pour ultra scalping")
            
            symbol_info = mt5.symbol_info(self.symbol)
            if symbol_info:
                safe_log(f"üìä Spread: {symbol_info.spread} points")
                safe_log(f"ÔøΩ Ask: {symbol_info.ask}")
                safe_log(f"üìâ Bid: {symbol_info.bid}")
                
            return True
        else:
            safe_log(f"‚ùå Impossible d'activer {self.symbol}")
            return False
    
    def initialize_mt5(self):
        """Initialise MT5 pour ultra scalping"""
        if not mt5.initialize():
            safe_log("‚ùå √âchec initialisation MT5")
            return False
        
        # Connexion compte
        if not mt5.login(MT5_LOGIN, password=MT5_PASSWORD, server=MT5_SERVER):
            safe_log(f"‚ùå √âchec connexion compte {MT5_LOGIN}")
            safe_log(f"Erreur: {mt5.last_error()}")
            mt5.shutdown()
            return False
        
        safe_log("‚úÖ MT5 initialis√© pour ULTRA SCALPING")
        
        # Infos compte
        account_info = mt5.account_info()
        if account_info:
            safe_log(f"üí∞ Balance: ${account_info.balance:.2f}")
            safe_log(f"üìä √âquit√©: ${account_info.equity:.2f}")
        
        # Activation symbole
        if mt5.symbol_select(self.symbol, True):
            safe_log(f"‚ö° {self.symbol} activ√© pour ultra scalping")
            
            symbol_info = mt5.symbol_info(self.symbol)
            if symbol_info:
                safe_log(f"üìä Spread: {symbol_info.spread} points")
                safe_log(f"üìà Ask: {symbol_info.ask}")
                safe_log(f"üìâ Bid: {symbol_info.bid}")
                
            return True
        else:
            safe_log(f"‚ùå Impossible d'activer {self.symbol}")
            return False
    
    def calculate_adaptive_lot_size(self):
        """Calcule la taille du lot adapt√©e √† la balance du compte"""
        try:
            account_info = mt5.account_info()
            if not account_info:
                safe_log("‚ö†Ô∏è Impossible de r√©cup√©rer les infos compte, lot par d√©faut: 0.01")
                return 0.01
            
            balance = account_info.balance
            
            # Logique adaptative bas√©e sur la balance
            if balance < 2000:
                lot_size = 0.01
            elif balance < 3000:
                lot_size = 0.02
            elif balance < 4000:
                lot_size = 0.03
            elif balance < 5000:
                lot_size = 0.04
            elif balance < 6000:
                lot_size = 0.05
            elif balance < 7000:
                lot_size = 0.06
            elif balance < 8000:
                lot_size = 0.07
            elif balance < 9000:
                lot_size = 0.08
            elif balance < 10000:
                lot_size = 0.09
            else:
                # Pour les balances > 10000, on continue la progression par tranches de 1000
                tranche = int(balance / 1000)
                lot_size = min(tranche * 0.01, 500)  # Maximum 500 lots pour la s√©curit√©

            safe_log(f"üí∞ Balance: ${balance:.2f} ‚Üí Lot adaptatif: {lot_size}")
            return lot_size
            
        except Exception as e:
            safe_log(f"‚ùå Erreur calcul lot adaptatif: {e}")
            return 0.01  # Valeur par d√©faut en cas d'erreur
    
    def place_real_order(self, trade_type, entry_price, tp_price, sl_price, signal):
        """Place un ordre r√©el sur MT5"""
        try:
            # V√©rification connexion MT5
            if not mt5.terminal_info():
                safe_log("‚ùå MT5 non connect√©")
                return False
            
            # Type d'ordre
            order_type = mt5.ORDER_TYPE_SELL if trade_type == "SELL" else mt5.ORDER_TYPE_BUY
            
            # Volume (lot size adaptatif bas√© sur la balance)
            volume = self.calculate_adaptive_lot_size()
            
            # V√©rification du symbole
            symbol_info = mt5.symbol_info(self.symbol)
            if symbol_info is None:
                safe_log("‚ùå Impossible de r√©cup√©rer infos symbole")
                return False
                
            # V√©rification que le symbole est s√©lectionn√©
            if not symbol_info.select:
                safe_log(f"‚ö†Ô∏è S√©lection du symbole {self.symbol}")
                if not mt5.symbol_select(self.symbol, True):
                    safe_log("‚ùå Impossible de s√©lectionner le symbole")
                    return False
                symbol_info = mt5.symbol_info(self.symbol)
            
            # Volume minimum
            min_volume = symbol_info.volume_min
            max_volume = symbol_info.volume_max
            volume_step = symbol_info.volume_step
            
            safe_log(f"üìä Volume: {volume} | Min: {min_volume} | Max: {max_volume}")
            
            if volume < min_volume:
                volume = min_volume
                safe_log(f"‚ö†Ô∏è Volume ajust√© au minimum: {volume}")
            
            # Prix d'entr√©e
            tick_info = mt5.symbol_info_tick(self.symbol)
            if tick_info is None:
                safe_log("‚ùå Impossible de r√©cup√©rer prix")
                return False
                
            if trade_type == "SELL":
                price = tick_info.bid
            else:
                price = tick_info.ask
            
            safe_log(f"üí∞ Prix {trade_type}: {price} | Bid: {tick_info.bid} | Ask: {tick_info.ask}")
            
            # Calcul TP en points
            point = symbol_info.point
            digits = symbol_info.digits
            
            if trade_type == "SELL":
                tp_points = int((price - tp_price) / point)
            else:
                tp_points = int((tp_price - price) / point)
            
            safe_log(f"üéØ TP Points: {tp_points} | Point size: {point}")
            
            # Request de trading
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": self.symbol,
                "volume": volume,
                "type": order_type,
                "price": price,
                "tp": tp_price,
                "deviation": 20,  # D√©viation de prix plus large
                "magic": 123456,  # Magic number
                "comment": f"UltraScalp_{signal['reason'][:20]}",  # Limit√© √† 20 chars
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }
            
            # Ajout SL seulement si sp√©cifi√©
            if sl_price and sl_price > 0:
                request["sl"] = sl_price
            
            safe_log(f"üìã Request: {request}")
            
            # Envoi de l'ordre
            result = mt5.order_send(request)
            
            if result is None:
                last_error = mt5.last_error()
                safe_log(f"‚ùå √âchec envoi ordre: result is None | Erreur: {last_error}")
                return False
                
            if result.retcode != mt5.TRADE_RETCODE_DONE:
                safe_log(f"‚ùå √âchec ordre: Code {result.retcode}")
                safe_log(f"   üí¨ Commentaire: {result.comment}")
                
                # Codes d'erreur courants
                if result.retcode == 10004:
                    safe_log("   ‚ö†Ô∏è Requ√™te invalide")
                elif result.retcode == 10006:
                    safe_log("   ‚ö†Ô∏è Rejet par dealer")
                elif result.retcode == 10015:
                    safe_log("   ‚ö†Ô∏è Prix invalide")
                elif result.retcode == 10016:
                    safe_log("   ‚ö†Ô∏è Stops invalides")
                elif result.retcode == 10018:
                    safe_log("   ‚ö†Ô∏è Volume invalide")
                
                return False
            
            # Succ√®s !
            safe_log(f"üéØ ORDRE EX√âCUT√â:")
            safe_log(f"   üìã Ticket: {result.order}")
            safe_log(f"   üí∞ Volume: {result.volume}")
            safe_log(f"   üí∏ Prix: {result.price}")
            safe_log(f"   üéØ TP: {tp_price}")
            
            # Enregistrement de la position pour suivi temporel
            position_info = {
                'ticket': result.order,
                'open_time': datetime.now(),
                'type': trade_type,
                'volume': result.volume,
                'open_price': result.price,
                'tp': tp_price,
                'sl': sl_price
            }
            self.open_positions.append(position_info)
            
            # Mise √† jour stats
            self.stats['total_trades'] += 1
            self.stats['last_trade_time'] = datetime.now()
            
            # Mise √† jour compteurs par type
            if trade_type == 'SELL':
                self.sell_positions_count += 1
            else:
                self.buy_positions_count += 1
            
            return True
            
        except Exception as e:
            safe_log(f"‚ùå Erreur placement ordre: {e}")
            import traceback
            safe_log(f"   üîç D√©tails: {traceback.format_exc()}")
            return False
    
    def check_and_close_old_positions(self):
        """V√©rifie et ferme les positions ouvertes depuis plus de 30 minutes"""
        if not self.open_positions:
            return
        
        # D'abord, synchronisation avec MT5 pour supprimer les positions d√©j√† ferm√©es
        self.sync_positions_with_mt5()
        
        current_time = datetime.now()
        positions_to_remove = []
        
        for i, position in enumerate(self.open_positions):
            open_duration = current_time - position['open_time']
            
            # Si la position est ouverte depuis plus de 30 minutes
            if open_duration.total_seconds() > 30 * 60:  # 30 minutes en secondes
                ticket = position['ticket']
                
                # Tentative de fermeture de la position
                success = self.close_position_by_ticket(ticket)
                
                if success:
                    duration_str = str(open_duration).split('.')[0]  # Format HH:MM:SS
                    safe_log(f"üîí POSITION FERM√âE (timeout 30min)")
                    safe_log(f"   üìã Ticket: {ticket}")
                    safe_log(f"   ‚è∞ Dur√©e: {duration_str}")
                    safe_log(f"   üí∞ Prix ouverture: {position['open_price']}")
                    
                    positions_to_remove.append(i)
                else:
                    safe_log(f"‚ùå √âchec fermeture position {ticket}")
        
        # Suppression des positions ferm√©es de la liste (en ordre inverse pour √©viter les d√©calages d'index)
        for i in reversed(positions_to_remove):
            self.open_positions.pop(i)
    
    def sync_positions_with_mt5(self):
        """Synchronise notre liste avec les positions r√©elles de MT5"""
        if not self.open_positions:
            return
        
        # R√©cup√©ration des positions ouvertes sur MT5
        mt5_positions = mt5.positions_get(symbol=self.symbol)
        mt5_tickets = [pos.ticket for pos in mt5_positions] if mt5_positions else []
        
        # Suppression des positions qui ne sont plus ouvertes sur MT5
        positions_to_remove = []
        for i, position in enumerate(self.open_positions):
            if position['ticket'] not in mt5_tickets:
                duration = datetime.now() - position['open_time']
                duration_str = str(duration).split('.')[0]
                
                # R√©cup√©ration du profit depuis l'historique (TP ou SL)
                profit_info = self.get_detailed_position_profit_from_history(position['ticket'])
                if profit_info:
                    profit = profit_info['profit']
                    close_type = profit_info['type']
                    self.update_daily_profit(profit)
                    
                    if close_type == 'TP':
                        safe_log(f"‚úÖ Position ferm√©e (TP): Ticket {position['ticket']} | Profit: {profit:+.2f}‚Ç¨ | Dur√©e: {duration_str}")
                    elif close_type == 'SL':
                        safe_log(f"‚ùå Position ferm√©e (SL): Ticket {position['ticket']} | Perte: {profit:+.2f}‚Ç¨ | Dur√©e: {duration_str}")
                    else:
                        safe_log(f"üîÑ Position ferm√©e: Ticket {position['ticket']} | P&L: {profit:+.2f}‚Ç¨ | Dur√©e: {duration_str}")
                else:
                    safe_log(f"‚ö†Ô∏è Position ferm√©e (profit non d√©tect√©): Ticket {position['ticket']} | Dur√©e: {duration_str}")
                
                # Mise √† jour des compteurs par type
                if position['type'] == 'SELL':
                    self.sell_positions_count = max(0, self.sell_positions_count - 1)
                else:
                    self.buy_positions_count = max(0, self.buy_positions_count - 1)
                positions_to_remove.append(i)
        
        # Suppression en ordre inverse
        for i in reversed(positions_to_remove):
            self.open_positions.pop(i)
    
    def close_position_by_ticket(self, ticket):
        """Ferme une position sp√©cifique par son ticket"""
        try:
            # R√©cup√©ration des informations de la position
            positions = mt5.positions_get(ticket=ticket)
            
            if not positions:
                safe_log(f"‚ö†Ô∏è Position {ticket} non trouv√©e (d√©j√† ferm√©e?)")
                return True  # Consid√©r√© comme succ√®s si d√©j√† ferm√©e
            
            position = positions[0]
            
            # D√©termination du type d'ordre de fermeture
            if position.type == mt5.POSITION_TYPE_BUY:
                order_type = mt5.ORDER_TYPE_SELL
                price = mt5.symbol_info_tick(position.symbol).bid
            else:
                order_type = mt5.ORDER_TYPE_BUY
                price = mt5.symbol_info_tick(position.symbol).ask
            
            # Request de fermeture
            close_request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": position.symbol,
                "volume": position.volume,
                "type": order_type,
                "position": ticket,
                "price": price,
                "deviation": 20,
                "magic": 123456,
                "comment": "Fermeture_timeout_30min",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }
            
            # Envoi de l'ordre de fermeture
            result = mt5.order_send(close_request)
            
            if result is None:
                last_error = mt5.last_error()
                safe_log(f"‚ùå √âchec fermeture: result is None | Erreur: {last_error}")
                return False
            
            if result.retcode != mt5.TRADE_RETCODE_DONE:
                safe_log(f"‚ùå √âchec fermeture: Code {result.retcode} | {result.comment}")
                return False
            
            return True
            
        except Exception as e:
            safe_log(f"‚ùå Erreur fermeture position {ticket}: {e}")
            return False
    
    def get_ultra_fast_data(self, count=50):
        """R√©cup√®re donn√©es ultra rapides pour scalping (sans pandas)"""
        rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 0, count)
        
        if rates is None:
            safe_log(f"‚ùå Impossible de r√©cup√©rer donn√©es {self.symbol}")
            return None
        
        # Conversion simple en liste de dictionnaires
        data = []
        for rate in rates:
            data.append({
                'time': rate[0],
                'open': rate[1],
                'high': rate[2], 
                'low': rate[3],
                'close': rate[4],
                'volume': rate[5]
            })
        
        return data
    
    def check_daily_profit_limit(self):
        """V√©rifie si la limite journali√®re de profit est atteinte"""
        today = datetime.now().date()
        
        # Reset si nouveau jour
        if self.stats['daily_start'] != today:
            self.stats['daily_start'] = today
            safe_log(f"üåÖ Nouveau jour d√©tect√© - Reset du profit journalier")
            
            # Reset du profit journalier √† 0‚Ç¨ (normal pour un nouveau jour)
            self.stats['daily_profit'] = 0
            self.bot_trades_profit = 0
            
            # D√©sactiver le profit manuel pour le nouveau jour (retour √† l'auto)
            if self.manual_daily_profit is not None:
                safe_log(f"üìä Nouveau jour : reset profit manuel")
                self.manual_daily_profit = None
        
        # V√©rification de la limite
        if self.stats['daily_profit'] >= DAILY_PROFIT_LIMIT and not self.stats['daily_limit_reached']:
            self.stats['daily_limit_reached'] = True
            safe_log(f"üéØ LIMITE JOURNALI√àRE ATTEINTE : {self.stats['daily_profit']:.2f}‚Ç¨/{DAILY_PROFIT_LIMIT}‚Ç¨")
            safe_log(f"‚è∏Ô∏è Arr√™t des nouveaux trades - En attente que les positions ouvertes deviennent positives")
            return True
            
        return self.stats['daily_limit_reached']
    
    def get_detailed_position_profit_from_history(self, ticket):
        """R√©cup√®re le profit d√©taill√© d'une position depuis l'historique des deals"""
        try:
            # R√©cup√©ration de l'historique des deals pour ce ticket
            from_date = datetime.now() - timedelta(hours=1)  # Cherche dans la derni√®re heure
            to_date = datetime.now()
            
            deals = mt5.history_deals_get(from_date, to_date, position=ticket)
            if deals:
                # Filtrer les deals de sortie (fermeture) uniquement
                exit_deals = [deal for deal in deals if deal.entry == mt5.DEAL_ENTRY_OUT]
                
                if exit_deals:
                    # Prendre le dernier deal de sortie (fermeture)
                    last_exit_deal = exit_deals[-1]
                    total_profit = last_exit_deal.profit
                    
                    # D√©terminer le type de fermeture plus pr√©cis√©ment
                    comment = last_exit_deal.comment.lower() if last_exit_deal.comment else ""
                    
                    # Logique am√©lior√©e de d√©tection SL/TP
                    close_type = "MANUAL"  # Par d√©faut
                    
                    # 1. D'abord v√©rifier le commentaire
                    if "tp" in comment or "take profit" in comment:
                        close_type = "TP"
                    elif "sl" in comment or "stop loss" in comment:
                        close_type = "SL"
                    else:
                        # 2. Si commentaire peu fiable, analyser le profit ET la raison
                        # Pour les SELL: TP = profit positif, SL = profit n√©gatif
                        # Pour les BUY: TP = profit positif, SL = profit n√©gatif
                        if total_profit > 0.05:  # Seuil minimum pour TP
                            close_type = "TP"
                        elif total_profit < -0.05:  # Seuil minimum pour SL
                            close_type = "SL"
                        else:
                            # 3. Profit tr√®s faible, analyser plus finement
                            close_type = "BREAKEVEN"
                    
                    safe_log(f"üîç Debug profit d√©taill√© - Ticket {ticket}:")
                    safe_log(f"   üí∞ Profit brut: {total_profit:.2f}‚Ç¨")
                    safe_log(f"   üìù Commentaire MT5: '{comment}'")
                    safe_log(f"   üéØ Type final: {close_type}")
                    safe_log(f"   ‚öñÔ∏è Logique: {'Profit > 0.05' if total_profit > 0.05 else 'Perte < -0.05' if total_profit < -0.05 else 'Neutre'}")
                    
                    return {
                        'profit': total_profit,
                        'type': close_type,
                        'comment': comment
                    }
                else:
                    # Fallback: sommer tous les deals si pas de deal de sortie sp√©cifique
                    total_profit = sum(deal.profit for deal in deals)
                    safe_log(f"üîç Debug profit (fallback) - Ticket {ticket}: {total_profit:.2f}‚Ç¨")
                    
                    close_type = "SL" if total_profit < -0.05 else "TP" if total_profit > 0.05 else "BREAKEVEN"
                    return {
                        'profit': total_profit,
                        'type': close_type,
                        'comment': "fallback"
                    }
                    
        except Exception as e:
            safe_log(f"‚ö†Ô∏è Erreur r√©cup√©ration profit d√©taill√©: {e}")
        
        return None
    
    def get_position_profit_from_history(self, ticket):
        """R√©cup√®re le profit d'une position depuis l'historique des deals"""
        try:
            # R√©cup√©ration de l'historique des deals pour ce ticket
            from_date = datetime.now() - timedelta(hours=1)  # Cherche dans la derni√®re heure
            to_date = datetime.now()
            
            deals = mt5.history_deals_get(from_date, to_date, position=ticket)
            if deals:
                # Le dernier deal contient le profit de fermeture
                total_profit = sum(deal.profit for deal in deals)
                return total_profit
        except Exception as e:
            safe_log(f"‚ö†Ô∏è Erreur r√©cup√©ration profit: {e}")
        
        return None
    
    def update_daily_profit(self, profit_amount):
        """Met √† jour le profit journalier"""
        # Si profit manuel d√©fini, on ajoute seulement aux trades du bot
        if self.manual_daily_profit is not None:
            self.bot_trades_profit += profit_amount
            self.stats['daily_profit'] = self.manual_daily_profit + self.bot_trades_profit
            safe_log(f"üí∞ Profit journalier mis √† jour: {self.stats['daily_profit']:.2f}‚Ç¨/{DAILY_PROFIT_LIMIT}‚Ç¨")
            safe_log(f"   üìä Base manuelle: {self.manual_daily_profit:.2f}‚Ç¨ + Trades bot: {self.bot_trades_profit:.2f}‚Ç¨")
        else:
            # Sinon ajout direct classique
            self.stats['daily_profit'] += profit_amount
            safe_log(f"üí∞ Profit journalier mis √† jour: {self.stats['daily_profit']:.2f}‚Ç¨/{DAILY_PROFIT_LIMIT}‚Ç¨")
    
    def force_update_manual_profit(self, new_manual_profit):
        """Force la mise √† jour du profit manuel (pour corrections)"""
        if self.manual_daily_profit is not None:
            old_profit = self.manual_daily_profit
            self.manual_daily_profit = new_manual_profit
            self.stats['daily_profit'] = self.manual_daily_profit + self.bot_trades_profit
            safe_log(f"üîÑ Profit manuel corrig√©: {old_profit:.2f}‚Ç¨ ‚Üí {new_manual_profit:.2f}‚Ç¨")
            safe_log(f"üí∞ Nouveau profit total: {self.stats['daily_profit']:.2f}‚Ç¨/{DAILY_PROFIT_LIMIT}‚Ç¨")
        else:
            # Si pas de profit manuel, on l'initialise
            self.manual_daily_profit = new_manual_profit
            self.bot_trades_profit = 0
            self.stats['daily_profit'] = new_manual_profit
            safe_log(f"‚úÖ Profit manuel initialis√©: {new_manual_profit:.2f}‚Ç¨")
            safe_log(f"üí∞ Profit total: {self.stats['daily_profit']:.2f}‚Ç¨/{DAILY_PROFIT_LIMIT}‚Ç¨")
    
    def force_profit_sync_now(self):
        """Force une synchronisation imm√©diate du profit avec MT5"""
        safe_log("üîÑ Synchronisation forc√©e du profit...")
        safe_log(f"‚úÖ Profit actuel: {self.stats['daily_profit']:.2f}‚Ç¨/{DAILY_PROFIT_LIMIT}‚Ç¨")
    
    def close_profitable_positions(self):
        """Ferme toutes les positions qui sont actuellement profitables"""
        if not self.open_positions:
            return
            
        # R√©cup√©ration des positions MT5
        mt5_positions = mt5.positions_get(symbol=self.symbol)
        if not mt5_positions:
            return
            
        closed_count = 0
        for position in mt5_positions:
            # V√©rification si la position est profitable
            if position.profit > 0:
                success = self.close_position_by_ticket(position.ticket)
                if success:
                    closed_count += 1
                    self.update_daily_profit(position.profit)
                    safe_log(f"üí∞ Position ferm√©e (profitable): Ticket {position.ticket} | Profit: +{position.profit:.2f}‚Ç¨")
        
        if closed_count > 0:
            safe_log(f"‚úÖ {closed_count} positions profitables ferm√©es")
            
        # V√©rification si toutes les positions sont ferm√©es
        remaining_positions = mt5.positions_get(symbol=self.symbol)
        if not remaining_positions:
            safe_log(f"üèÅ Toutes les positions ferm√©es - Journ√©e termin√©e avec {self.stats['daily_profit']:.2f}‚Ç¨ de profit")
            return True
            
        return False
    
    def detect_ultra_trend(self, data):
        """D√©tection ultra rapide de tendance pour scalping (sans pandas)"""
        if len(data) < max(TREND_EMA_SLOW, RSI_PERIOD):
            return "UNKNOWN", 0, {'ema_fast': 0, 'ema_slow': 0, 'rsi': 50, 'price': 0, 'ema_diff_pct': 0}
        
        # Extraction des prix de cl√¥ture
        close_prices = [candle['close'] for candle in data]
        
        # Calcul EMA rapide (m√©thode simple)
        ema_fast = self.calculate_ema(close_prices, TREND_EMA_FAST)
        ema_slow = self.calculate_ema(close_prices, TREND_EMA_SLOW)
        
        # Calcul RSI simple
        rsi = self.calculate_rsi(close_prices, RSI_PERIOD)
        
        # Valeurs actuelles
        current_ema_fast = ema_fast[-1]
        current_ema_slow = ema_slow[-1]
        current_rsi = rsi[-1] if rsi else 50
        current_price = close_prices[-1]
        
        # D√©tection ultra sensible
        ema_diff = current_ema_fast - current_ema_slow
        ema_diff_pct = (ema_diff / current_price) * 100 if current_price != 0 else 0
        
        # Force de tendance (plus √©lev√© = plus fort)
        strength = abs(ema_diff_pct) * 100
        
        # Logique de d√©tection
        if current_ema_fast > current_ema_slow and current_rsi > 50:
            trend = "BULLISH"  # Hausse d√©tect√©e
        elif current_ema_fast < current_ema_slow and current_rsi < 50:
            trend = "BEARISH"  # Baisse d√©tect√©e
        else:
            trend = "SIDEWAYS"  # Pas de tendance claire
        
        # Mise √† jour historique
        if trend != self.trend_data['current_trend']:
            self.trend_data['last_trend_change'] = datetime.now()
            self.trend_data['trend_duration'] = 0
        else:
            self.trend_data['trend_duration'] += 1
        
        self.trend_data['current_trend'] = trend
        self.trend_data['trend_strength'] = strength
        
        return trend, strength, {
            'ema_fast': current_ema_fast,
            'ema_slow': current_ema_slow,
            'rsi': current_rsi,
            'price': current_price,
            'ema_diff_pct': ema_diff_pct
        }
    
    def calculate_ema(self, prices, period):
        """Calcule l'EMA sans pandas"""
        if len(prices) < period:
            return prices.copy()
        
        multiplier = 2 / (period + 1)
        ema = [prices[0]]  # Premier prix comme base
        
        for price in prices[1:]:
            ema_value = (price * multiplier) + (ema[-1] * (1 - multiplier))
            ema.append(ema_value)
        
        return ema
    
    def calculate_rsi(self, prices, period):
        """Calcule le RSI sans pandas"""
        if len(prices) < period + 1:
            return [50] * len(prices)  # RSI neutre par d√©faut
        
        deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
        
        gains = [delta if delta > 0 else 0 for delta in deltas]
        losses = [-delta if delta < 0 else 0 for delta in deltas]
        
        # Moyenne simple pour les premiers points
        avg_gain = sum(gains[:period]) / period
        avg_loss = sum(losses[:period]) / period
        
        rsi_values = []
        
        for i in range(period, len(gains)):
            if avg_loss == 0:
                rsi_values.append(100)
            else:
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))
                rsi_values.append(rsi)
            
            # Mise √† jour des moyennes (lissage)
            avg_gain = (avg_gain * (period - 1) + gains[i]) / period
            avg_loss = (avg_loss * (period - 1) + losses[i]) / period
        
        # Compl√©ter pour avoir la m√™me longueur que les prix
        return [50] * period + rsi_values
    
    def should_open_position(self, trend, strength, indicators):
        """D√©cide si on doit ouvrir une position contre-tendance"""
        
        # V√©rification limite journali√®re de profit
        if self.stats['daily_limit_reached']:
            return None  # Pas de nouveaux trades si limite atteinte
        
        # V√©rification limites globales
        if self.position_count >= MAX_POSITIONS:
            return None
        
        # On ne trade que si la tendance est claire et forte
        if trend == "SIDEWAYS" or strength < 0.01:  # Force minimum 0.01%
            return None
        
        current_rsi = indicators['rsi']
        
        # LOGIQUE CONTRE-TENDANCE:
        # Si march√© BULLISH (hausse) ‚Üí SELL (bet sur correction)
        # Si march√© BEARISH (baisse) ‚Üí BUY (bet sur rebond)
        
        if trend == "BULLISH" and strength > 0.015:  # Hausse forte
            # V√©rification limite sp√©cifique pour SELL (5 max)
            if self.sell_positions_count >= 5:
                return None
                
            # Conditions pour VENDRE (contre la hausse)
            if current_rsi > self.config['RSI_OVERBOUGHT']:  # RSI selon config
                return {
                    'type': 'SELL',
                    'reason': 'FADE_BULLISH_TREND',
                    'strength': strength,
                    'rsi': current_rsi,
                    'confidence': min(strength * 50, 0.9)
                }
        
        elif trend == "BEARISH" and strength > 0.015:  # Baisse forte
            # Conditions pour ACHETER (contre la baisse)
            if current_rsi < self.config['RSI_OVERSOLD']:  # RSI selon config
                return {
                    'type': 'BUY', 
                    'reason': 'FADE_BEARISH_TREND',
                    'strength': strength,
                    'rsi': current_rsi,
                    'confidence': min(strength * 50, 0.9)
                }
        
        return None
    
    def execute_ultra_scalp_trade(self, signal, current_price):
        """Ex√©cute un trade de scalping ultra rapide"""
        
        trade_type = signal['type']
        
        # R√©cup√©ration prix r√©el pour calcul TP
        tick_info = mt5.symbol_info_tick(self.symbol)
        if tick_info is None:
            safe_log("‚ùå Impossible de r√©cup√©rer prix pour TP")
            return
        
        # Calcul des niveaux avec prix r√©el
        if trade_type == 'BUY':
            entry_price = tick_info.ask  # Prix d'achat r√©el
            tp_price = entry_price + (TP_PIPS * 0.01)  # TP √† +TP_PIPS pips
            sl_price = None  # Pas de SL pour les BUY
        else:  # SELL
            entry_price = tick_info.bid  # Prix de vente r√©el
            tp_price = entry_price - (TP_PIPS * 0.01)  # TP √† -TP_PIPS pips 
            sl_price = entry_price + (TP_PIPS * 10 * 0.01) if USE_STOP_LOSS else None  # SL √† 10x TP pour SELL
        
        # Log du signal
        safe_log(f"‚ö° ULTRA SCALP {trade_type} - {signal['reason']}")
        safe_log(f"   üí∞ Prix: ${entry_price:.2f}")
        safe_log(f"   üéØ TP: ${tp_price:.2f} ({TP_PIPS} pips)")
        safe_log(f"   üõ°Ô∏è SL: {'AUCUN' if sl_price is None else f'${sl_price:.2f}'}")
        safe_log(f"   üìä Force: {signal['strength']:.3f}% | RSI: {signal['rsi']:.1f}")
        safe_log(f"   üé≤ Confiance: {signal['confidence']:.2f}")
        
        if ENABLE_REAL_TRADING:
            # üöÄ TRADING R√âEL MT5
            success = self.place_real_order(trade_type, entry_price, tp_price, sl_price, signal)
            if success:
                safe_log("‚úÖ ORDRE PLAC√â SUR MT5!")
                return
            else:
                safe_log("‚ùå √âchec placement ordre MT5")
                return
        
        # Simulation r√©sultat (pour test)
        # Dans le vrai bot, on surveillerait les positions r√©elles
        # Simulation ultra rapide du r√©sultat
        
        # Calcul du lot adaptatif pour la simulation
        adaptive_lot = self.calculate_adaptive_lot_size()
        
        trade_success = random.random() < 0.85  # 85% de r√©ussite en simulation
        profit_pips = 0
        loss_pips = 0  
        profit_usd = 0
        loss_usd = 0
        
        if trade_success:
            profit_pips = TP_PIPS
            profit_usd = profit_pips * adaptive_lot * 1  # Approximation avec lot adaptatif
            safe_log(f"‚úÖ SCALP GAGNANT: +{profit_pips} pips = +${profit_usd:.2f}")
            self.stats['winning_trades'] += 1
        else:
            # Si pas de SL, on simule une petite perte (march√© contre nous)
            if USE_STOP_LOSS:
                loss_pips = -10
                loss_usd = loss_pips * adaptive_lot * 1
                safe_log(f"‚ùå Scalp perdant: {loss_pips} pips = ${loss_usd:.2f}")
            else:
                # Sans SL, on simule que √ßa revient en notre faveur rapidement
                if random.random() < 0.8:  # 80% de chance de r√©cup√©ration rapide
                    profit_pips = 1  # Petit profit √† terme
                    profit_usd = profit_pips * adaptive_lot * 1
                    safe_log(f"üîÑ R√©cup√©ration: +{profit_pips} pip = +${profit_usd:.2f}")
                    self.stats['winning_trades'] += 1
                else:
                    loss_pips = -5  # Perte mod√©r√©e sans SL
                    loss_usd = loss_pips * adaptive_lot * 1
                    safe_log(f"‚ö†Ô∏è Position d√©favorable: {loss_pips} pips = ${loss_usd:.2f}")
        
        # Mise √† jour statistiques
        self.stats['total_trades'] += 1
        self.stats['total_pips'] += profit_pips if trade_success else loss_pips
        self.stats['total_profit'] += profit_usd if trade_success else loss_usd
        self.stats['last_trade_time'] = datetime.now()
        
        # Simulation position ouverte/ferm√©e rapidement
        self.position_count += 1
        # Dans un vrai scalping, la position serait ferm√©e en quelques secondes/minutes
        # Ici on simule une fermeture imm√©diate
        time.sleep(1)  # 1 seconde pour simuler la dur√©e du trade
        self.position_count = max(0, self.position_count - 1)
        
        return True
    
    def run_ultra_scalping_cycle(self):
        """Ex√©cute un cycle d'ultra scalping"""
        
        # V√©rification et fermeture des positions anciennes (>30min)
        self.check_and_close_old_positions()
        
        # Synchronisation avec MT5 (positions ferm√©es par TP)
        self.sync_positions_with_mt5()
        
        # V√©rification de la limite journali√®re de profit
        daily_limit_reached = self.check_daily_profit_limit()
        
        # Si limite atteinte, fermer les positions profitables et attendre
        if daily_limit_reached:
            all_closed = self.close_profitable_positions()
            if all_closed:
                safe_log("üèÅ Journ√©e termin√©e - Arr√™t du bot")
                self.is_trading = False
                return
            # Continue le cycle pour surveiller les positions restantes
        
        # R√©cup√©ration donn√©es ultra rapides
        df = self.get_ultra_fast_data()
        if df is None:
            return
        
        # D√©tection tendance ultra rapide
        trend, strength, indicators = self.detect_ultra_trend(df)
        
        current_price = indicators['price']  # Utilise le prix depuis les indicateurs
        
        # Affichage √©tat march√© (compact pour scalping)
        open_positions_count = len(self.open_positions)
        daily_status = f"üí∞{self.stats['daily_profit']:.1f}‚Ç¨/{DAILY_PROFIT_LIMIT}‚Ç¨"
        if self.stats['daily_limit_reached']:
            daily_status += " ‚è∏Ô∏è"
        safe_log(f"üìä ${current_price:.2f} | {trend} {strength:.3f}% | RSI:{indicators['rsi']:.1f} | SELL:{self.sell_positions_count}/5 | BUY:{self.buy_positions_count} | {daily_status}")
        
        # V√©rification signal contre-tendance
        signal = self.should_open_position(trend, strength, indicators)
        
        if signal:
            safe_log(f"üî• SIGNAL CONTRE-TENDANCE: {signal['type']} vs {trend}")
            self.execute_ultra_scalp_trade(signal, current_price)
        
        # Affichage stats rapides toutes les 10 trades
        if self.stats['total_trades'] > 0 and self.stats['total_trades'] % 10 == 0:
            self.display_ultra_stats()
    
    def display_ultra_stats(self):
        """Affiche les stats ultra scalping"""
        if self.stats['total_trades'] == 0:
            return
        
        win_rate = (self.stats['winning_trades'] / self.stats['total_trades']) * 100
        elapsed = datetime.now() - self.stats['start_time']
        
        safe_log(f"\nüìà ULTRA STATS (derni√®res 10 trades):")
        safe_log(f"   ‚ö° Total: {self.stats['total_trades']} | WR: {win_rate:.1f}%")
        safe_log(f"   üí∞ Pips: {self.stats['total_pips']:+.1f} | Profit: ${self.stats['total_profit']:+.2f}")
        safe_log(f"   ‚è±Ô∏è Dur√©e: {elapsed} | Vitesse: {self.stats['total_trades']/(elapsed.total_seconds()/60):.1f} trades/min")
    
    def run_ultra_scalping_session(self, duration_minutes=60):
        """Lance une session d'ultra scalping"""
        safe_log(f"\nüî• LANCEMENT ULTRA SCALPING SESSION")
        safe_log("="*60)
        safe_log(f"‚ö° Strat√©gie: CONTRE-TENDANCE EXTR√äME")
        safe_log(f"üìà Hausse ‚Üí SELL | üìâ Baisse ‚Üí BUY")
        safe_log(f"üéØ TP: {TP_PIPS} pips | SL: {'AUCUN' if not USE_STOP_LOSS else '10 pips'}")
        safe_log(f"‚è±Ô∏è Dur√©e: {duration_minutes} minutes")
        safe_log(f"üîÑ Analyse: toutes les {ANALYSIS_INTERVAL} secondes")
        safe_log("")
        
        if ENABLE_REAL_TRADING:
            safe_log("‚ö†Ô∏è MODE TRADING R√âEL ACTIV√â!")
        else:
            safe_log("üéÆ MODE SIMULATION")
        
        self.is_trading = True
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=duration_minutes)
        
        cycle_count = 0
        
        try:
            while datetime.now() < end_time and self.is_trading:
                cycle_count += 1
                
                # Cycle ultra rapide
                self.run_ultra_scalping_cycle()
                
                # Pause ultra courte
                time.sleep(ANALYSIS_INTERVAL)
                
        except KeyboardInterrupt:
            safe_log(f"\n‚èπÔ∏è Session ultra scalping interrompue")
        
        self.is_trading = False
        self.generate_ultra_report()
    
    def run_ultra_scalping_unlimited(self):
        """Lance l'ultra scalping en mode illimit√©"""
        safe_log(f"\nüî• ULTRA SCALPING - MODE ILLIMIT√â")
        safe_log("="*60)
        safe_log(f"‚ôæÔ∏è Session sans limite de temps")
        safe_log(f"‚ö° Analyse toutes les {ANALYSIS_INTERVAL} secondes")
        safe_log(f"üéØ TP: {TP_PIPS} pips | SL: {'AUCUN' if not USE_STOP_LOSS else '10 pips'}")
        safe_log(f"‚èπÔ∏è Arr√™t: Ctrl+C")
        
        self.is_trading = True
        cycle_count = 0
        
        try:
            while self.is_trading:
                cycle_count += 1
                
                # Affichage progression toutes les 100 cycles
                if cycle_count % 100 == 1:
                    elapsed = datetime.now() - self.stats['start_time']
                    safe_log(f"\nüî• CYCLE {cycle_count} - Temps: {elapsed}")
                
                self.run_ultra_scalping_cycle()
                time.sleep(ANALYSIS_INTERVAL)
                
        except KeyboardInterrupt:
            elapsed = datetime.now() - self.stats['start_time']
            safe_log(f"\n‚èπÔ∏è Ultra scalping arr√™t√© apr√®s {elapsed}")
            safe_log(f"üìä Total cycles: {cycle_count}")
        
        self.is_trading = False
        self.generate_ultra_report()
    
    def generate_ultra_report(self):
        """G√©n√®re le rapport final ultra scalping"""
        safe_log(f"\n" + "="*70)
        safe_log("üî• RAPPORT FINAL - ULTRA SCALPING CONTRE-TENDANCE")
        safe_log("="*70)
        
        if self.stats['total_trades'] == 0:
            safe_log("‚ÑπÔ∏è Aucun trade ex√©cut√© durant cette session")
            return
        
        win_rate = (self.stats['winning_trades'] / self.stats['total_trades']) * 100
        avg_pips = self.stats['total_pips'] / self.stats['total_trades']
        session_duration = datetime.now() - self.stats['start_time']
        trades_per_minute = self.stats['total_trades'] / (session_duration.total_seconds() / 60)
        
        safe_log(f"\n‚ö° PERFORMANCE ULTRA SCALPING:")
        safe_log(f"   Total trades: {self.stats['total_trades']}")
        safe_log(f"   Win rate: {win_rate:.1f}%")
        safe_log(f"   Total pips: {self.stats['total_pips']:+.1f}")
        safe_log(f"   Profit total: ${self.stats['total_profit']:+.2f}")
        safe_log(f"   Pips moyens/trade: {avg_pips:+.2f}")
        
        safe_log(f"\nüìä STATISTIQUES SESSION:")
        safe_log(f"   Dur√©e: {session_duration}")
        safe_log(f"   Vitesse: {trades_per_minute:.1f} trades/minute")
        safe_log(f"   Positions max simultan√©es: {self.stats['max_concurrent_positions']}")
        
        # √âvaluation performance
        safe_log(f"\nüèÜ √âVALUATION:")
        if win_rate > 60 and self.stats['total_pips'] > 0:
            safe_log(f"   üåü EXCELLENT! Strat√©gie ultra profitable")
        elif win_rate > 50:
            safe_log(f"   ‚úÖ BON! Strat√©gie rentable")
        elif win_rate > 40:
            safe_log(f"   ‚ö†Ô∏è MOYEN. Peut √™tre am√©lior√©")
        else:
            safe_log(f"   ‚ùå DIFFICILE. Revoir la strat√©gie")
        
        safe_log(f"\nüî• Session ultra scalping termin√©e!")
    
    def shutdown(self):
        """Arr√™t propre du bot ultra scalping"""
        self.is_trading = False
        mt5.shutdown()
        safe_log("üëã Ultra Scalping Bot arr√™t√© proprement")

def main():
    """Fonction principale Ultra Scalping"""
    safe_log("üî• ULTRA SCALPING BOT - CONTRE-TENDANCE EXTR√äME")
    safe_log("="*60)
    safe_log("‚ö° Strat√©gie: Fade les tendances, bet sur corrections")
    safe_log("üìà Hausse d√©tect√©e ‚Üí SELL")
    safe_log("üìâ Baisse d√©tect√©e ‚Üí BUY") 
    safe_log(f"üéØ TP: {TP_PIPS} pips | SL: {'AUCUN' if not USE_STOP_LOSS else '10 pips'}")
    
    if ENABLE_REAL_TRADING:
        safe_log("‚ö†Ô∏è ATTENTION: TRADING R√âEL ACTIV√â!")
        safe_log("üö® STRAT√âGIE TR√àS RISQU√âE!")
        confirmation = input("Continuer? (yes/NO): ").lower()
        if confirmation != 'yes':
            safe_log("‚ùå Session annul√©e")
            return
    else:
        safe_log("üéÆ MODE SIMULATION")
    
    # Lancement du bot avec profit manuel par d√©faut √† None
    try:
        manual_profit = None  # Pas de profit manuel par d√©faut
        
        # Menu de dur√©e
        print("\n" + "="*50)
        print("‚è∞ DUR√âE ULTRA SCALPING")
        print("="*50)
        print("1. üïê 10 minutes (test ultra rapide)")
        print("2. üïê 30 minutes (test court)")
        print("3. üïë 1 heure (session standard)")
        print("4. üïï 3 heures (session longue)")
        print("5. ‚ôæÔ∏è ILLIMIT√â (mode warrior)")
        
        choice = input("\nVotre choix (1-5, d√©faut=1): ").strip()
        
        if choice == "1" or choice == "":
            duration = 10
        elif choice == "2":
            duration = 30
        elif choice == "3":
            duration = 60
        elif choice == "4":
            duration = 180
        elif choice == "5":
            duration = None  # Illimit√©
        else:
            safe_log("‚ùå Choix invalide, test 10 minutes")
            duration = 10
        
        # Lancement du bot
        bot = UltraScalpingBot(manual_daily_profit=manual_profit)
        
        try:
            if duration is None:
                safe_log("‚ôæÔ∏è MODE WARRIOR ACTIV√â - Arr√™t avec Ctrl+C")
                safe_log("üí° Tapez 'correct' dans le terminal pour corriger le profit manuellement")
                bot.run_ultra_scalping_unlimited()
            else:
                safe_log(f"‚è∞ Session ultra scalping: {duration} minutes")
                bot.run_ultra_scalping_session(duration)
                
        except KeyboardInterrupt:
            safe_log("‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            safe_log(f"‚ùå Erreur: {e}")
            import traceback
            safe_log(f"D√©tails: {traceback.format_exc()}")
        finally:
            bot.shutdown()
            
    except KeyboardInterrupt:
        safe_log("‚èπÔ∏è Lancement annul√©")

if __name__ == "__main__":
    main()
