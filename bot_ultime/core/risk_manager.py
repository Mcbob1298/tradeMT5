"""
RISK MANAGER - Gestionnaire de Risque Global pour le Bot Ultime
Contr√¥le la prise de risque globale de toutes les strat√©gies combin√©es
"""

import threading
import MetaTrader5 as mt5
import time
from datetime import datetime, date
from ..config.config_ultimate import (
    MAX_TOTAL_TRADES, SYMBOL, MAX_DAILY_LOSS, MAX_DAILY_PROFIT, 
    M15_SNIPER_CONFIG, M5_COMMANDO_CONFIG, M1_SCALPER_CONFIG, COLORS
)

# === VERROUS DE S√âCURIT√â ===
# Le "Lock" emp√™che les threads de se marcher sur les pieds
mt5_lock = threading.Lock()
risk_lock = threading.Lock()

# === STATISTIQUES GLOBALES ===
class RiskStats:
    def __init__(self):
        self.daily_pnl = 0.0
        self.total_trades_today = 0
        self.last_reset_date = date.today()
        self.trades_by_strategy = {15001: 0, 5001: 0, 1001: 0}  # Magic numbers
        self.emergency_stop = False
        
    def reset_daily_stats(self):
        """Remet √† z√©ro les stats quotidiennes"""
        current_date = date.today()
        if current_date != self.last_reset_date:
            print(f"üîÑ {COLORS['YELLOW']}Reset des statistiques quotidiennes{COLORS['RESET']}")
            self.daily_pnl = 0.0
            self.total_trades_today = 0
            self.trades_by_strategy = {15001: 0, 5001: 0, 1001: 0}
            self.last_reset_date = current_date
            self.emergency_stop = False

# Instance globale des statistiques
risk_stats = RiskStats()

def update_daily_pnl():
    """Met √† jour le P&L quotidien en analysant les positions ferm√©es"""
    with mt5_lock:
        try:
            today = datetime.now().date()
            # R√©cup√©rer les deals d'aujourd'hui
            deals = mt5.history_deals_get(
                datetime.combine(today, datetime.min.time()),
                datetime.now()
            )
            
            if deals is not None:
                daily_profit = sum(deal.profit for deal in deals if deal.symbol == SYMBOL)
                risk_stats.daily_pnl = daily_profit
                return daily_profit
            return 0.0
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur update P&L: {e}")
            return 0.0

def can_open_new_trade(magic_number, strategy_name):
    """
    V√©rifie si une nouvelle position peut √™tre ouverte
    
    Args:
        magic_number: Num√©ro magique de la strat√©gie
        strategy_name: Nom de la strat√©gie pour les logs
    
    Returns:
        bool: True si le trade peut √™tre ouvert
    """
    with risk_lock:
        # Reset quotidien si n√©cessaire
        risk_stats.reset_daily_stats()
        
        # V√©rification arr√™t d'urgence
        if risk_stats.emergency_stop:
            print(f"üö® {COLORS['RED']}ARR√äT D'URGENCE ACTIF - Tous trades bloqu√©s{COLORS['RESET']}")
            return False
        
        # Mise √† jour du P&L quotidien
        current_pnl = update_daily_pnl()
        
        # V√©rification perte maximale quotidienne
        if current_pnl <= MAX_DAILY_LOSS:
            print(f"üö® {COLORS['RED']}LIMITE DE PERTE QUOTIDIENNE ATTEINTE: {current_pnl:.2f}$ ‚â§ {MAX_DAILY_LOSS}${COLORS['RESET']}")
            risk_stats.emergency_stop = True
            return False
            
        # V√©rification profit maximal quotidien (protection des gains)
        if current_pnl >= MAX_DAILY_PROFIT:
            print(f"üéØ {COLORS['GREEN']}OBJECTIF QUOTIDIEN ATTEINT: {current_pnl:.2f}$ ‚â• {MAX_DAILY_PROFIT}$ - Arr√™t pr√©ventif{COLORS['RESET']}")
            risk_stats.emergency_stop = True
            return False
    
    # V√©rification nombre total de positions
    with mt5_lock:
        positions = mt5.positions_get(symbol=SYMBOL)
        if positions is None:
            print(f"‚ö†Ô∏è {COLORS['YELLOW']}Erreur lecture positions MT5{COLORS['RESET']}")
            return False
        
        current_positions = len(positions)
        if current_positions >= MAX_TOTAL_TRADES:
            print(f"‚ö†Ô∏è {COLORS['YELLOW']}{strategy_name}: Limite de {MAX_TOTAL_TRADES} trades atteinte ({current_positions}){COLORS['RESET']}")
            return False
    
    # V√©rification sp√©cifique par strat√©gie (√©viter le spam)
    strategy_positions = len([p for p in positions if p.magic == magic_number])
    if strategy_positions >= 2:  # Maximum 2 positions par strat√©gie
        print(f"‚ö†Ô∏è {COLORS['YELLOW']}{strategy_name}: Maximum 2 positions par strat√©gie atteint{COLORS['RESET']}")
        return False
    
    print(f"‚úÖ {COLORS['GREEN']}{strategy_name}: Autorisation de trade accord√©e (P&L: {current_pnl:.2f}$, Positions: {current_positions}){COLORS['RESET']}")
    return True

def place_order_safely(request, strategy_name):
    """
    Place un ordre en utilisant le verrou de s√©curit√©
    
    Args:
        request: Dictionnaire de requ√™te MT5
        strategy_name: Nom de la strat√©gie
    
    Returns:
        tuple: (success, result)
    """
    with mt5_lock:
        try:
            result = mt5.order_send(request)
            if result is None:
                print(f"‚ùå {COLORS['RED']}{strategy_name}: √âchec ordre - R√©sultat None{COLORS['RESET']}")
                return False, None
                
            if result.retcode == mt5.TRADE_RETCODE_DONE:
                # Mise √† jour des statistiques
                with risk_lock:
                    risk_stats.total_trades_today += 1
                    risk_stats.trades_by_strategy[request['magic']] += 1
                
                print(f"‚úÖ {COLORS['GREEN']}{strategy_name}: Ordre ex√©cut√© - Ticket #{result.order}{COLORS['RESET']}")
                return True, result
            else:
                print(f"‚ùå {COLORS['RED']}{strategy_name}: Ordre rejet√© - Code: {result.retcode}{COLORS['RESET']}")
                return False, result
                
        except Exception as e:
            print(f"üí• {COLORS['RED']}{strategy_name}: Exception lors du placement - {e}{COLORS['RESET']}")
            return False, None

def get_risk_summary():
    """Retourne un r√©sum√© des risques actuels"""
    with risk_lock:
        risk_stats.reset_daily_stats()
        current_pnl = update_daily_pnl()
        
        with mt5_lock:
            positions = mt5.positions_get(symbol=SYMBOL)
            pos_count = len(positions) if positions else 0
            
            # Comptage par strat√©gie
            m15_pos = len([p for p in (positions or []) if p.magic == 15001])
            m5_pos = len([p for p in (positions or []) if p.magic == 5001])
            m1_pos = len([p for p in (positions or []) if p.magic == 1001])
    
    return {
        "daily_pnl": current_pnl,
        "total_positions": pos_count,
        "total_trades_today": risk_stats.total_trades_today,
        "emergency_stop": risk_stats.emergency_stop,
        "positions_by_strategy": {
            "M15": m15_pos,
            "M5": m5_pos, 
            "M1": m1_pos
        },
        "risk_level": "HIGH" if pos_count >= MAX_TOTAL_TRADES * 0.8 else "NORMAL"
    }

def emergency_close_all():
    """Ferme toutes les positions en cas d'urgence"""
    print(f"üö® {COLORS['RED']}FERMETURE D'URGENCE DE TOUTES LES POSITIONS{COLORS['RESET']}")
    
    with mt5_lock:
        positions = mt5.positions_get(symbol=SYMBOL)
        if positions is None:
            return
            
        for position in positions:
            close_request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": position.symbol,
                "volume": position.volume,
                "type": mt5.ORDER_TYPE_SELL if position.type == mt5.POSITION_TYPE_BUY else mt5.ORDER_TYPE_BUY,
                "position": position.ticket,
                "magic": position.magic,
                "comment": "EMERGENCY_CLOSE"
            }
            
            result = mt5.order_send(close_request)
            if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                print(f"‚úÖ Position #{position.ticket} ferm√©e")
            else:
                print(f"‚ùå √âchec fermeture position #{position.ticket}")
    
    risk_stats.emergency_stop = True

def reset_emergency_stop():
    """R√©initialise l'arr√™t d'urgence (√† utiliser avec pr√©caution)"""
    with risk_lock:
        risk_stats.emergency_stop = False
        print(f"üîÑ {COLORS['GREEN']}Arr√™t d'urgence r√©initialis√©{COLORS['RESET']}")

# === SURVEILLANCE CONTINUE ===
def risk_monitor():
    """Thread de surveillance continue des risques"""
    while True:
        try:
            summary = get_risk_summary()
            
            # Log p√©riodique (toutes les 5 minutes)
            if int(time.time()) % 300 == 0:
                print(f"""
üìä {COLORS['CYAN']}RAPPORT RISQUE{COLORS['RESET']}
üí∞ P&L Quotidien: {summary['daily_pnl']:.2f}$
üìà Positions: {summary['total_positions']}/{MAX_TOTAL_TRADES}
üéØ Trades Jour: {summary['total_trades_today']}
‚ö° M15: {summary['positions_by_strategy']['M15']} | M5: {summary['positions_by_strategy']['M5']} | M1: {summary['positions_by_strategy']['M1']}
üö® Statut: {'ARR√äT' if summary['emergency_stop'] else 'ACTIF'}
""")
            
            time.sleep(10)  # V√©rification toutes les 10 secondes
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur surveillance risque: {e}")
            time.sleep(30)

if __name__ == "__main__":
    # Test du risk manager
    print("üß™ Test du Risk Manager")
    if not mt5.initialize():
        print("‚ùå √âchec initialisation MT5")
    else:
        summary = get_risk_summary()
        print(f"R√©sum√©: {summary}")
        mt5.shutdown()
